import * as forms from "codeforlife/components/form"
import { type FC, useRef } from "react"
import { Typography } from "@mui/material"
import { handleResultState } from "codeforlife/utils/api"
import qrcode from "qrcode"

import {
  useCreateAuthFactorMutation,
  useGenerateOtpProvisioningUriQuery,
} from "../../../../api/authFactor"

export interface SetupPendingProps {
  onSetup: () => void
}

const _SetupPending: FC<SetupPendingProps & { otpProvisioningUri: string }> = ({
  onSetup,
  otpProvisioningUri,
}) => {
  const canvasRef = useRef<HTMLCanvasElement | null>(null)

  if (canvasRef.current) {
    qrcode.toCanvas(canvasRef.current, otpProvisioningUri, error => {
      if (error) console.error(error)
    })
  }

  return (
    <>
      <Typography align="center" variant="h4" marginBottom={5}>
        Enable two-factor authentication
      </Typography>
      <canvas ref={canvasRef}></canvas>
      <Typography>
        Alternatively you can use the following secret to manually set up TOTP
        in your authenticator or password manager.
      </Typography>
      <Typography>
        TOTP Secret: <span style={{ textDecoration: "underline" }}>ABC</span>
      </Typography>
      <Typography>Then, enter the token generated by the app.</Typography>
      <forms.Form
        initialValues={{ type: "otp" as const, otp: "" }}
        useMutation={useCreateAuthFactorMutation}
        submitOptions={{ then: onSetup }}
      >
        <forms.OtpField />
        <forms.SubmitButton sx={{ marginLeft: "auto" }}>
          Next
        </forms.SubmitButton>
      </forms.Form>
    </>
  )
}

const SetupPending: FC<SetupPendingProps> = props =>
  handleResultState(
    useGenerateOtpProvisioningUriQuery(null),
    otpProvisioningUri => (
      <_SetupPending otpProvisioningUri={otpProvisioningUri} {...props} />
    ),
  )

export default SetupPending
